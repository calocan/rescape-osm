#!/bin/sh

### BEGIN INIT INFO
# Provides:          Overpass server to query OpenStreetMap
# Required-Start:    $local_fs $network $syslog
# Required-Stop:     $local_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts five processes needed to server and maintain Overpass/OpenStreetMap
# Description:       The five processes needed to server and maintain Overpass/OpenStreetMap
### END INIT INFO

NAME='overpass'

USER="ubuntu"
GROUP="ubuntu"

PATH="/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin"
APPDIR="/home/ubuntu/src/osm-3s_v0.7.55"
DBDIR="$APPDIR/db"
DBDIR_MARKER_FILES="$DB_DIR/osm3s_v0.7.55_osm_*"

NAME_DISPATCHER_OSM_BASE="dispatcherosmbase"
APPARGS_DISPATCHER_OSM_BASE="$APPDIR/bin/dispatcher --osm-base --meta --db-dir=$DBDIR"

NAME_FETCH_OSC="fetchosc"
APPARGS_FETCH_OSC='$APPDIR/bin/fetch_osc.sh id "https://planet.osm.org/replication/day/" "diffs/"'

NAME_APPLY_OSC_TO_DB="apply_osc_to_db"
APPSARGS_APPLY_OSC_TO_DB='$APPDIR/bin/apply_osc_to_db.sh "diffs/" auto --meta=yes'

NAME_DISPATCHER_OSM_AREAS="dispatcherosmareas"
APPARGS_DISPATCHER_OSM_AREAS="$APPDIR/bin/dispatcher --areas --db-dir=$DBDIR"

NAME_RULES_LOOP="rulesloop"
APPARGS_RULES_LOOP="$APPDIR/bin/rules_loop.sh $DBDIR"


# Include functions 
set -e
. /lib/lsb/init-functions

start() {
  printf "APPDIR: $APPDIR\n"
  printf "DBDIR: $DBDIR\n"
  printf "Starting '$NAME_DISPATCHER_OSM_BASE'... \n"
  printf "start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_DISPATCHER_OSM_BASE.pid --chdir "$APPDIR" --exec "$APPBIN" -- $APPARGS_DISPATCHER_OSM_BASE || true\n"
  start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_DISPATCHER_OSM_BASE.pid --chdir "$APPDIR" --exec "$APPBIN" -- $APPARGS_DISPATCHER_OSM_BASE || true
  printf "Starting '$NAME_FETCH_OSC'... \n"
  printf "start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_FETCH_OSC.pid --chdir "APPDIR" --exec "$APPBIN" -- $APPARGS_FETCH_OSC || true\n"
  start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_FETCH_OSC.pid --chdir "$APPDIR" --exec "$APPBIN" -- $APPARGS_FETCH_OSC || true
  printf "Starting '$NAME_FETCH_OSC_TO_DB'... \n"
  printf "start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_FETCH_OSC_TO_DB.pid --chdir "$APPDIR" --exec "$APPBIN" -- $APPARGS_FETCH_OSC_TO_DB || true\n"
  start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_FETCH_OSC_TO_DB.pid --chdir "$APPDIR" --exec "$APPBIN" -- $APPARGS_FETCH_OSC_TO_DB || true
  printf "Starting '$NAME_DISPATCHER_OSM_AREAS'... \n"
  printf "start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_DISPATCHER_OSM_AREAS.pid --chdir "$APPDIR" --exec "$APPBIN" -- $APPARGS_DISPATCHER_OSM_AREAS || true\n"
  start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_DISPATCHER_OSM_AREAS.pid --chdir "$APPDIR" --exec "$APPBIN" -- $APPARGS_DISPATCHER_OSM_AREAS || true
  printf "Starting '$NAME_RULES_LOOP'... \n"
  printf "start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_RULES_LOOP.pid --chdir "$APPDIR" --exec "$APPBIN" -- $APPARGS_RULES_LOOP || true\n"
  start-stop-daemon --start --chuid "$USER:$GROUP" --background --make-pidfile --pidfile /var/run/$NAME_RULES_LOOP.pid --chdir "$APPDIR" --exec "$APPBIN" -- $APPARGS_RULES_LOOP || true
  renice -n 19 -p `cat /var/run/$NAME_RULES_LOOP.pid`
  ionice -c 2 -n 7 -p `cat /var/run/$NAME_RULES_LOOP.pid`
  sudo systemctl restart nginx
  sudo systemctl restart php7.0-fpm
  printf "done\n"
}

#We need this function to ensure the whole process tree will be killed
killtree() {
    local _pid=$1
    local _sig=${2-TERM}
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child} ${_sig}
    done
    kill -${_sig} ${_pid}
}

stop() {
  rm -f $DBDIR_MARKER_FILES
  for _name in $NAME_DISPATCHER_OSM_BASE $NAME_FETCH_OSC $NAME_APPLY_OSC_TO_DB $NAME_DISPATCHER_OSM_AREAS $NAME_RULES_LOOP; do
      printf "Stopping '${_name}'... "
      [ -z `cat /var/run/${_name}.pid 2>/dev/null` ] || \
      while test -d /proc/$(cat /var/run/${_name}.pid); do
        killtree $(cat /var/run/${_name}.pid) 15
        sleep 0.5
      done
      [ -z `cat /var/run/${name}.pid 2>/dev/null` ] || rm /var/run/${name}.pid
      printf "done\n"
  done
}

status() {
    printf "Status of processes\n"
    for _name in $NAME_DISPATCHER_OSM_BASE $NAME_FETCH_OSC $NAME_APPLY_OSC_TO_DB $NAME_DISPATCHER_OSM_AREAS $NAME_RULES_LOOP; do
        printf 'status_of_proc -p /var/run/${_name}.pid "" ${_name}\n'
        status_of_proc -p /var/run/${_name}.pid "" ${_name}
    done
    exit 0 || exit $?
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  status)
    status
    ;;
  *)
    echo "Usage: $NAME {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0
